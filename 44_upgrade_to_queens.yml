---
# This play updatets the Nova Mitaka DB to Queens.
# It requires that the virtualenv is installed
# See: 03_install_newton_virtualenv.yml 

- name: Setup Env for Queens db upgrades
  hosts: api_servers[1]
  gather_facts: no
  become: yes
  vars:
    services:
      - { name: nova_db, command: "nova-manage --config-file={{ virtualenv }}/nova.conf db version" } # Pike: 362, Queens: 378
      - {Â name: api_db, command: "nova-manage --config-file={{ virtualenv }}/nova.conf api_db version" } # Pike: 42, Queens: 52
    other_services:
      - name: barbican
        # because barbican-db-manage in queens does not have the --config file thingy..
        config_file: "/etc/barbican/barbican.conf"
        test_command: "barbican-db-manage"
        test_param: "current"
        upgrade_command: "upgrade"
      - name: cinder1
        git_version: stable/queens
        config_file: "cinder.conf"
        test_command: "cinder-manage"
        test_param: "db version"
        upgrade_command: "db online_data_migrations"
      - name: cinder2
        git_version: stable/queens
        config_file: "cinder.conf"
        test_command: "cinder-manage"
        test_param: "db version"
        upgrade_command: "db sync"
      - name : glance
        git_version: stable/queens
        config_file: "glance-api.conf"
        test_command: "glance-manage"
        test_param: "db version"
        upgrade_command: "db sync"
      - name: heat
        git_version: stable/queens
        config_file: "heat.conf"
        test_command: "heat-manage"
        test_param: "db_version"
        upgrade_command: "db_sync"
      - name : keystone
        git_version: stable/queens
        config_file: "keystone.conf"
        test_command: "keystone-manage"
        test_param: "db_version"
        upgrade_command: "db_sync"
      - name : magnum
        git_version: stable/queens
        config_file: "magnum.conf"
        test_command: "magnum-db-manage"
        test_param: "version"
        upgrade_command: "upgrade"
      - name: neutron
        git_version: stable/queens
        config_file: "neutron.conf"
        test_command: "neutron-db-manage"
        test_param: "current"
        upgrade_command: "upgrade heads"
      - name: nova
        git_version: stable/queens
        config_file: "nova.conf"
        test_command: "nova-manage"
        test_param: "db version"
        upgrade_command: "db sync"
    virtualenv: "/root/queens"
  tasks:

## Notes:
# ceph luminous in the rpms
# some rpm dependency messed caused by these playbooks


    - name: Queens db version check pre sync
      shell: "{{ item.command }}"
      register: pre_sync
      with_items: "{{ services }}"
    - name: Show db version before sync on screen
      shell: "echo"
      with_together:
        - "{{ pre_sync.results|map(attribute='item')|list }}"
        - "{{ pre_sync.results|map(attribute='stdout')|list }}"
    - name:  Queens Nova db syncs
      shell: "nova-manage --config-file={{ virtualenv }}/nova.conf db sync"
      register: nova_db_version
    - name: Queens Nova api_db sync
      shell: "nova-manage --config-file={{ virtualenv }}/nova.conf api_db sync"
      register: nova_api_version
    - name: Queens Nova online_data_migration (took 1h45m with 2 cores on cpouta-test)
      shell: "nova-manage --config-file={{ virtualenv }}/nova.conf db online_data_migrations"
    - name: Queens db version check after sync
      shell: "{{ item.command }}"
      with_items: "{{ services }}"
      register: post_sync
    - name: Show db version after sync on screen
      shell: "echo"
      with_together:
        - "{{ post_sync.results|map(attribute='item')|list }}"
        - "{{ post_sync.results|map(attribute='stdout')|list }}"

############

    - name: Use rpm installed version to Check that all modules except barbican can do a version check
      shell: "{{ item.test_command }} --config-file {{ virtualenv }}/{{ item.config_file }} {{ item.test_param }}"
      changed_when: False
      with_items: "{{ other_services }}"
      register: reg_post3
      tags: [check_version]
      when: item.name != "barbican"

    - name: Use rpm installed version to Check that barbican can do a version check
      shell: "{{ item.test_command }} {{ item.test_param }}"
      changed_when: False
      with_items: "{{ other_services }}"
      register: reg_post4
      tags: [check_version]
      when: item.name == "barbican"

    - name: print reg_post3
      debug:
        var: reg_post3
        verbosity: 1
    - name: print reg_post4
      debug:
        var: reg_post4
        verbosity: 1

# upgrade
    - name: Use rpm installed version to Upgrade that all modules except barbican
      shell: "{{ item.test_command }} --config-file {{ virtualenv }}/{{ item.config_file }} {{ item.upgrade_command }}"
      changed_when: False
      with_items: "{{ other_services }}"
      tags: [upgrade]
      when: item.name != "barbican"

    - name: Use rpm installed version to Upgrade barbican
      shell: "{{ item.test_command }} {{ item.upgrade_command }}"
      changed_when: False
      with_items: "{{ other_services }}"
      tags: [upgrade]
      when: item.name == "barbican"

# check version after

    - name: Use rpm installed version to Check that all modules except barbican can do a version check
      shell: "{{ item.test_command }} --config-file {{ virtualenv }}/{{ item.config_file }} {{ item.test_param }}"
      changed_when: False
      with_items: "{{ other_services }}"
      register: reg_post
      tags: [check_version, check_version_last]
      when: item.name != "barbican"

    - name: Use rpm installed version to Check that barbican can do a version check
      shell: "{{ item.test_command }} {{ item.test_param }}"
      changed_when: False
      register: reg_post
      with_items: "{{ other_services }}"
      tags: [check_version, check_version_last]
      when: item.name == "barbican"
