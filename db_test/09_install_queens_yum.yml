---
# This playbook will install and setup the Mitaka Virtual Env for the
# database upgrade procedure. This should be run on a Liberty Api node
# before shutdown.

- name: Setup Env for queens database upgrade
  hosts: db_test_servers
  gather_facts: no
  become: yes
  vars:
    virtualenv: "/root/queens"
    repodir: "/root/gitrepo_queens"
    services:

      - name: barbican
        git_version: stable/queens
        # because barbican-db-manage in ocata does not have the --config file thingy..
        config_file: "/etc/barbican/barbican.conf"
        test_command: "barbican-db-manage"
        test_param: "current"
      - name: cinder
        git_version: stable/queens
        config_file: "cinder.conf"
        test_command: "cinder-manage"
        test_param: "db version"
      - name : glance
        git_version: stable/queens
        config_file: "glance-api.conf"
        test_command: "glance-manage"
        test_param: "db version"
      - name: heat
        git_version: stable/queens
        config_file: "heat.conf"
        test_command: "heat-manage"
        test_param: "db_version"
      - name : keystone
        git_version: stable/queens
        config_file: "keystone.conf"
        test_command: "keystone-manage"
        test_param: "db_version"
      - name : magnum
        git_version: stable/queens
        config_file: "magnum.conf"
        test_command: "magnum-db-manage"
        test_param: "version"
      - name: neutron
        git_version: stable/queens
        config_file: "neutron.conf"
        test_command: "neutron-db-manage"
        test_param: "current"
      - name: nova
        git_version: stable/queens
        config_file: "nova.conf"
        test_command: "nova-manage"
        test_param: "db version"
    pip_packages:
      - pip
      - Routes
      - six
      - packaging
      - setuptools
      - pymysql
    pip_freeze_list: "queens.upper-constraints.txt"
    yum_venv_reqs:
        - python2-pip
        - git
        - python-devel
        - libffi-devel
        - openssl-devel
        - mariadb-devel
        - python-virtualenv
        - mariadb-server
        - MySQL-python

    openstack_old_meta_package:
        - centos-release-ceph-jewel
        - centos-release-openstack-ocata
        - centos-release-openstack-pike

    openstack_meta_package:
        - centos-release-openstack-queens
    openstack_rpms:
        - openstack-barbican
        - openstack-cinder
        - openstack-glance
        - openstack-heat-common
        - openstack-keystone
        - openstack-magnum-common
        - openstack-neutron
        - openstack-nova



  tasks:
    - name: Install pre-requisite packages for venv
      yum: name={{ yum_venv_reqs }} state=installed

    - name: first uninstall old openstack meta packages
      yum: name={{ openstack_old_meta_package }} state=absent
      tags: uninstall

    - name: Install openstack meta package
      yum: name={{ openstack_meta_package }} state=installed
      register: reg_openstack_meta

    - name: first uninstall old openstack rpms
      yum: name={{ openstack_rpms }} state=absent
      when: reg_openstack_meta is changed
      tags: uninstall

    - name: Install openstack RPMs
      yum: name={{ openstack_rpms }} state=installed

    - name: start and enable mariadb
      service:
        name: mariadb
        state: started
        enabled: yes

    - name: Upgrade virtualenv
      pip:
        name: "virtualenv"
        state: present
        version: 15.1.0
    - name: Update setuptools globally
      pip:
        name: "setuptools"
        state: present
        version: 34.2.0
    - name: Create the Virtual Env and install pip pre-reqs
      pip:
        name: "{{ pip_packages }}"
        state: latest
        virtualenv: "{{ virtualenv }}"
        virtualenv_site_packages: no

    - name: copy in almost blank config files
      copy:
        src: "{{ item.config_file }}"
        dest: "{{ virtualenv }}/{{ item.config_file }}"
      with_items: "{{services }}"
      when: item.name != "barbican"
      tags: config_files

    - name: copy in almost blank config files for barbican
      copy:
        src: "barbican.conf"
        dest: "{{ item.config_file }}"
      with_items: "{{services }}"
      when: item.name == "barbican"
      tags: config_files

    - name: create directories in /var/log for the services
      file:
        path: /var/log/{{ item.name }}
        state: directory
      with_items: "{{ services }}"
      tags: logdirs

    - name: This task will fail if there is no folder /var/lib/mysql/service-name. If it does - import all the databases listed in the services ansible variable and then run this playbook again
      stat:
        path: "/var/lib/mysql/{{ item.name }}"
      register: reg_stat_mysql_databases
      tags: db_check
      with_items: "{{ services }}"
      failed_when:
        - ( reg_stat_mysql_databases.stat.isdir is undefined or reg_stat_mysql_databases.stat.isdir == False)

    - name: Use rpm installed version to Check that all modules except barbican can do a version check
      shell: "{{ item.test_command }} --config-file {{ virtualenv }}/{{ item.config_file }} {{ item.test_param }}"
      changed_when: False
      with_items: "{{ services }}"
      tags: [check_version]
      when: item.name != "barbican"

    - name: Use rpm installed version to Check that barbican can do a version check
      shell: "{{ item.test_command }} {{ item.test_param }}"
      changed_when: False
      with_items: "{{ services }}"
      tags: [check_version]
      when: item.name == "barbican"

...
